W = matrix(0, nrow(coordsmat), nrow(coordsmat))
for(i in 1:nrow(W)){
for(j in i:nrow(W)){
cp = crossprod(coordsmat[i,] - coordsmat[j,])
if(cp > 0 && cp < 55){
W[i,j] = 1
W[j,i] = 1
}
}
}
sum(str_detect(names(df), "^rna[0-9]*$"))
my.cluster <- parallel::makeCluster(5)
parallel::clusterEvalQ(my.cluster, {
source('parlibs.R')
})
doParallel::registerDoParallel(cl = my.cluster)
models = foreach(i = 1:(sum(str_detect(names(df), "^rna[0-9]*$"))+1)) %dopar% {
if(i == 1){
try(spotsInla(df, W, "prot", character(), aar = aar, neighbors = F, family = c("poisson", "poisson")))
} else{
#try(spotsInla(df, W, "prot", paste("rna",1:(i-1),sep=""), aar = aar, neighbors = T))
#try(spotsInla(df, W, "prot", rnas[[i-1]], aar = aar, neighbors = T))
try(spotsInla(df, W, "prot", paste("rna", i-1, sep = ""), aar = aar, neighbors = T, family = c("poisson", "poisson")))
}
}
parallel::stopCluster(cl = my.cluster)
View(inla.rgeneric.MCCAR.model)
displayResults(models, df, df_pred, T) %>% arrange((dic))
displayResults(models, df, df_pred, T)
models[[1]]$summary.hyperpar
models[[3]]$summary.hyperpar
prot
rownames(breast$RNA[rnaids,])
df %>% ggplot() + geom_point(aes(x = imagecol, y = imagerow, color = rna2)) +
scale_color_scico(palette = "vik")
df %>% ggplot() + geom_point(aes(x = imagecol, y = imagerow, color = prot)) +
scale_color_scico(palette = "vik")
test = models
#top_preds = names(sort(abs(test), T)[1:3])
models = models[c(1, 3)]
models$preds = c("Vim")
models$df = df_pred
#save(models, file = paste(loc, "F480_cancer.RData"))
save(models, file = paste(loc, "CD117_cancer_unpaired.RData", sep = ""))
loc = "/Users/lukar818/Documents/postdoc/research/RnaProt/plots/bcancer/"
#save(models, file = paste(loc, "F480_cancer.RData"))
save(models, file = paste(loc, "CD117_cancer_unpaired.RData", sep = ""))
## script for examples of the cortex prediction
library(INLA)
library(scico)
source("../scripts/SPOTS/helpers.R")
source("../INLA/LCAR.R")
source("../INLA/MCAR.R")
source("../INLA/CCAR.R")
source("../INLA/spotCCAR.R")
source("../INLA/MCCAR.R")
source("../INLA/spotMCCAR.R")
spots = readSpotsSpleen("~/Documents/postdoc/MCAR/data/spots/spleen/")
spots$AAR
predData("CD4", NULL, spots, c("pulp", "bf", "mz", "pals"), geneindex = 1:500)
rownames(spots$RNA)
rownames(spots$protein)
spots$coords
spots$AAR
predData("CD4", NULL, spots, c("pulp", "bf", "mz", "pals"), geneindex = 1:500, genepair = "Cd4")
colSums(spots$protein)
rownames(spots$RNA) = str_replace(rownames(spots$RNA), "-", "_")
rownames(spots$RNA) = str_extract(rownames(spots$RNA), "^[0-9]*(.*)$", 1)
rna_size = unname(colSums(spots$RNA)) / median(colSums(spots$RNA))
protein_size = unname(colSums(spots$Protein)) / median(colSums(spots$Protein))
median(colSums(spots$Protein))
spots$Protein
names(spots)
names(spots)[2] = "Protein"
test = predData("CD4", NULL, spots, c("pulp", "bf", "mz", "pals"), geneindex = 1:500, genepair = "Cd4")
test$top_preds
df %>%
mutate(pred = ifelse(imagecol > 290 & imagecol < 390 & imagerow < 310 & imagerow > 210, 1, 0),
tot = sum(pred),
pred = factor(pred, labels = c("Known", "Prediction"))) %>%
ggplot() + geom_point(aes(x = imagecol, y = imagerow, color = pred)) +
theme_bw()
dat = test
rm(test)
df = dat$df
df %>%
mutate(pred = ifelse(imagecol > 290 & imagecol < 390 & imagerow < 310 & imagerow > 210, 1, 0),
tot = sum(pred),
pred = factor(pred, labels = c("Known", "Prediction"))) %>%
ggplot() + geom_point(aes(x = imagecol, y = imagerow, color = pred)) +
theme_bw()
coordsmat = cbind(df$imagerow, df$imagecol)
W = matrix(0, nrow(coords), nrow(coords))
for(i in 1:nrow(W)){
for(j in i:nrow(W)){
cp = crossprod(coordsmat[i,] - coordsmat[j,])
if(cp > 0 && cp < 45){
W[i,j] = 1
W[j,i] = 1
}
}
}
coordsmat = cbind(df$imagerow, df$imagecol)
coordsmat = cbind(df$imagerow, df$imagecol)
W = matrix(0, nrow(coordsmat), nrow(coordsmat))
for(i in 1:nrow(W)){
for(j in i:nrow(W)){
cp = crossprod(coordsmat[i,] - coordsmat[j,])
if(cp > 0 && cp < 45){
W[i,j] = 1
W[j,i] = 1
}
}
}
names(df)
aar = c("pulp", "bf", "mz", "pals")
pred_idx = which(df$imagecol > 290 & df$imagecol < 390 & df$imagerow < 310 & df$imagerow > 210)
df_pred = df[pred_idx,]
df$prot[pred_idx] = NA
(sum(str_detect(names(df), "^rna[0-9]*$"))+1)
my.cluster <- parallel::makeCluster(6)
parallel::clusterEvalQ(my.cluster, {
source('parlibs.R')
})
doParallel::registerDoParallel(cl = my.cluster)
models = foreach(i = 1:(sum(str_detect(names(df), "^rna[0-9]*$"))+1)) %dopar% {
if(i == 1){
try(spotsInla(df, W, "prot", character(), aar = aar, neighbors = T, family = c("poisson", "poisson")))
} else{
try(spotsInla(df, W, "prot", paste("rna",1:(i-1),sep=""), aar = aar, neighbors = T, family = c("poisson", "poisson")))
}
}
library(foreach)
my.cluster <- parallel::makeCluster(6)
parallel::clusterEvalQ(my.cluster, {
source('parlibs.R')
})
doParallel::registerDoParallel(cl = my.cluster)
models = foreach(i = 1:(sum(str_detect(names(df), "^rna[0-9]*$"))+1)) %dopar% {
if(i == 1){
try(spotsInla(df, W, "prot", character(), aar = aar, neighbors = T, family = c("poisson", "poisson")))
} else{
try(spotsInla(df, W, "prot", paste("rna",1:(i-1),sep=""), aar = aar, neighbors = T, family = c("poisson", "poisson")))
}
}
parallel::stopCluster(cl = my.cluster)
aar = c("pulp", "bf", "mz", "pals")
dat = predData("CD4", NULL, spots, aar, geneindex = 1:200, genepair = "Cd4")
dat$top_preds
df = dat$df
pred_idx = which(df$imagecol > 290 & df$imagecol < 390 & df$imagerow < 310 & df$imagerow > 210)
df_pred = df[pred_idx,]
df$prot[pred_idx] = NA
coordsmat = cbind(df$imagerow, df$imagecol)
W = matrix(0, nrow(coordsmat), nrow(coordsmat))
for(i in 1:nrow(W)){
for(j in i:nrow(W)){
cp = crossprod(coordsmat[i,] - coordsmat[j,])
if(cp > 0 && cp < 45){
W[i,j] = 1
W[j,i] = 1
}
}
}
my.cluster <- parallel::makeCluster(6)
parallel::clusterEvalQ(my.cluster, {
source('parlibs.R')
})
doParallel::registerDoParallel(cl = my.cluster)
models = foreach(i = 1:(sum(str_detect(names(df), "^rna[0-9]*$"))+1)) %dopar% {
if(i == 1){
try(spotsInla(df, W, "prot", character(), aar = aar, neighbors = T, family = c("poisson", "poisson")))
} else{
try(spotsInla(df, W, "prot", paste("rna",1:(i-1),sep=""), aar = aar, neighbors = T, family = c("poisson", "poisson")))
}
}
df$idx
df$prot
aar
m1 = try(spotsInla(df, W, "prot", character(), aar = aar, neighbors = T, family = c("poisson", "poisson")))
displayResults(list(m1), df, df_pred, T)
source("../scripts/utils.R")
displayResults(models, df, df_pred, T)
displayResults(list(m1), df, df_pred, T)
my.cluster <- parallel::makeCluster(6)
parallel::clusterEvalQ(my.cluster, {
source('parlibs.R')
})
doParallel::registerDoParallel(cl = my.cluster)
models = foreach(i = 1:(sum(str_detect(names(df), "^rna[0-9]*$"))+1)) %dopar% {
if(i == 1){
try(spotsInla(df, W, "prot", character(), aar = aar, neighbors = T, family = c("poisson", "poisson")))
} else{
try(spotsInla(df, W, "prot", paste("rna",1:(i-1),sep=""), aar = aar, neighbors = T, family = c("poisson", "poisson")))
}
}
parallel::stopCluster(cl = my.cluster)
m
displayResults(models, df, df_pred, T)
getwd()
parallel::stopCluster(cl = my.cluster)
source("../scripts/SPOTS/helpers.R")
source("../scripts/utils.R")
source("../INLA/LCAR.R")
source("../INLA/MCAR.R")
source("../INLA/indepMCAR.R")
source("../INLA/CCAR.R")
source("../INLA/MCCAR.R")
source("../INLA/spotCCAR.R")
source("../INLA/spotMCCAR.R")
breast = readSpotscancerlist("~/Documents/postdoc/MCAR/data/spots/cancer/")
aar = c("fbh", "fbl", "mac2", "unknown", "lymph", "mac1")
df = data.frame("spot" = dimnames(breast$Protein)[[2]],
"prot" = unname(breast$Protein[which(rownames(breast$Protein) == "Podoplanin"),]),
"size_prot" = unname(colSums(breast$Protein)) / median(colSums(breast$Protein)),
"size_rna" = unname(colSums(breast$RNA)) / median(colSums(breast$RNA)),
"idx" = 1:ncol(breast$Protein)) %>%
full_join(., breast$coords, by = "spot") %>%
full_join(breast$AAR, by = "spot") %>%
select(!AARs)
rna = data.frame(t(breast$RNA), row.names = c()) %>% select(all_of(c("Pdpn", "Sparc")))
names(rna) = paste("rna", 1:ncol(rna), sep = "")
df = cbind(df, rna)
set.seed(1); pred_idx = sample(1:nrow(df), 200)
coordsmat = cbind(df$imagerow, df$imagecol)
W = matrix(0, nrow(coordsmat), nrow(coordsmat))
for(i in 1:nrow(W)){
for(j in i:nrow(W)){
cp = crossprod(coordsmat[i,] - coordsmat[j,])
if(cp > 0 && cp < 55){
W[i,j] = 1
W[j,i] = 1
}
}
}
W2 = W
W = matrix(0, nrow(df), nrow(df))
for(i in 1:nrow(W)){
for(j in i:nrow(W)){
cp = crossprod(c(df$imagerow[i], df$imagecol[i]) - c(df$imagerow[j], df$imagecol[j]))
#cp = crossprod(coordsmat[i,] - coordsmat[j,])
if(cp > 0 && cp < 55){
W[i,j] = 1
W[j,i] = 1
}
}
}
all(W == W2)
str_detect(names(df), "^rna[0-9]*$"))
str_detect(names(df), "^rna[0-9]*$")
sum(str_detect(names(df), "^rna[0-9]*$"))
i = 3
paste("rna",1:(i-1),sep="")
library(INLA)
library(scico)
source("../scripts/SPOTS/helpers.R")
source("../INLA/LCAR.R")
source("../INLA/MCAR.R")
source("../INLA/CCAR.R")
source("../INLA/spotCCAR.R")
source("../INLA/MCCAR.R")
source("../INLA/spotMCCAR.R")
df = SpotsCancerData("~/Documents/postdoc/MCAR/data/spots/cancer/", genes) %>%
select(!c(AARs, spot)) %>%
mutate(idx = 1:nrow(.))
fig_pairs = list("CD3" = "Cd3e",
"F480" = "Adgre1",
"CD163" = "Cd163",
"CD29" = "Itgb1",
"CD68" = "Cd68",
"IgM" = "Ighm",
"CD38" = "Cd38",
"MadCAM1" = "Madcam1",
"EpCAM" = "Epcam",
"CD11b" = "Itgam",
"CD105" = "Eng",
"CD31" = "Pecam1",
"CD20" = "Ms4a1",
"CD169" = "Siglec1",
"IgD" = "Ighd",
"CD4" = "Cd4",
"CD8" = "Cd8a",
"CD19" = "Cd19",
"B220" = "Ptprc")
## SPLEEN
df = SpotsProteinData("~/Documents/postdoc/MCAR/data/spots/spleen/", fig_pairs)
#Visualize the AARs
df %>%
mutate(AARs = as.factor(AARs)) %>%
ggplot() + geom_point(aes(x = imagecol, y = imagerow, color = AARs)) +
scale_color_brewer(palette = "Set2") +
theme_bw() +
theme(text = element_text(size = 14),
legend.text.align = 0,
legend.title.align=0.2,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text=element_text(size=10),
#panel.spacing.y = unit(0.8, "lines"),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position="bottom")
df
SpotsProteinData = function(loc, genepairs){
spotsdata = readSpotsSpleen("~/Documents/postdoc/MCAR/data/spots/spleen/", 2)
# calculate sizes jointly (i.e. not slidewise)
prot = cbind(spotsdata$protein1, spotsdata$protein2)
RNA = cbind(spotsdata$RNA1, spotsdata$RNA2)
rna_size = unname(colSums(RNA)) / median(colSums(RNA))
protein_size = unname(colSums(prot)) / median(colSums(prot))
# Create a dataframe for slide 1 with the genes matching the proteins
rna_1 = as.data.frame(t(spotsdata$RNA1)) %>%
select(unname(sapply(genepairs, c))) %>%
mutate(spot = colnames(spotsdata$RNA1),
size_rna = rna_size[1:nrow(.)])
prot_1 = as.data.frame(t(spotsdata$protein1)) %>%
mutate(spot = colnames(spotsdata$protein1),
size_prot = protein_size[1:nrow(.)])
df_1 = full_join(rna_1, prot_1, by = "spot") %>%
full_join(spotsdata$coords1, by = "spot") %>%
full_join(spotsdata$AAR1, by = "spot")
# Create a dataframe for slide 2 with the genes matching the proteins
rna_2 = as.data.frame(t(spotsdata$RNA2)) %>%
select(unname(sapply(genepairs, c))) %>%
mutate(spot = colnames(spotsdata$RNA2),
size_rna = rna_size[(nrow(rna_1)+1):length(rna_size)])
prot_2 = as.data.frame(t(spotsdata$protein2)) %>%
mutate(spot = colnames(spotsdata$protein2),
size_prot = protein_size[(nrow(rna_1)+1):length(protein_size)])
df_2 = full_join(rna_2, prot_2, by = "spot") %>%
full_join(spotsdata$coords2, by = "spot") %>%
right_join(spotsdata$AAR2, by = "spot")
# move replicate 1 to the right of replicate 2
df_2$imagecol = df_2$imagecol + (max(df_1$imagecol)-min(df_2$imagecol)) + 5
df = rbind(df_1, df_2) %>% mutate(idx = 1:nrow(.)) #%>% select(!AARs)
names(df)[str_detect(names(df), "-")] = c("F480", "CD169", "B220")
return(df)
}
## SPLEEN
df = SpotsProteinData("~/Documents/postdoc/MCAR/data/spots/spleen/", fig_pairs)
#Visualize the AARs
df %>%
mutate(AARs = as.factor(AARs)) %>%
ggplot() + geom_point(aes(x = imagecol, y = imagerow, color = AARs)) +
scale_color_brewer(palette = "Set2") +
theme_bw() +
theme(text = element_text(size = 14),
legend.text.align = 0,
legend.title.align=0.2,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text=element_text(size=10),
#panel.spacing.y = unit(0.8, "lines"),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position="bottom")
#Visualize the AARs
df %>%
mutate(AARs = as.factor(AARs)) %>%
ggplot() + geom_point(aes(x = imagecol, y = imagerow, color = AARs)) +
scale_color_brewer(palette = "Set3") +
theme_bw() +
theme(text = element_text(size = 14),
legend.text.align = 0,
legend.title.align=0.2,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text=element_text(size=10),
#panel.spacing.y = unit(0.8, "lines"),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position="bottom")
#Visualize the AARs
df %>%
mutate(AARs = as.factor(AARs)) %>%
ggplot() + geom_point(aes(x = imagecol, y = imagerow, color = AARs)) +
scale_color_brewer(palette = "Set4") +
theme_bw() +
theme(text = element_text(size = 14),
legend.text.align = 0,
legend.title.align=0.2,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text=element_text(size=10),
#panel.spacing.y = unit(0.8, "lines"),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position="bottom")
#Visualize the AARs
df %>%
mutate(AARs = as.factor(AARs)) %>%
ggplot() + geom_point(aes(x = imagecol, y = imagerow, color = AARs)) +
scale_color_brewer(palette = "Set1") +
theme_bw() +
theme(text = element_text(size = 14),
legend.text.align = 0,
legend.title.align=0.2,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text=element_text(size=10),
#panel.spacing.y = unit(0.8, "lines"),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position="bottom")
#Visualize the AARs
df %>%
mutate(AARs = as.factor(AARs)) %>%
ggplot() + geom_point(aes(x = imagecol, y = imagerow, color = AARs)) +
scale_color_brewer(palette = "Set2") +
theme_bw() +
theme(text = element_text(size = 14),
legend.text.align = 0,
legend.title.align=0.2,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text=element_text(size=10),
#panel.spacing.y = unit(0.8, "lines"),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position="bottom")
#Visualize the AARs
df %>%
mutate(AARs = factor(AARs, levels = c("Red pulp", "PALS", "Marginal zone", "B follicle"))) %>%
ggplot() + geom_point(aes(x = imagecol, y = imagerow, color = AARs)) +
scale_color_brewer(palette = "Set2") +
theme_bw() +
theme(text = element_text(size = 14),
legend.text.align = 0,
legend.title.align=0.2,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text=element_text(size=10),
#panel.spacing.y = unit(0.8, "lines"),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position="bottom")
#Visualize the AARs
df %>%
mutate(AARs = factor(AARs, levels = c("PALS","Red pulp", "Marginal zone", "B follicle"))) %>%
ggplot() + geom_point(aes(x = imagecol, y = imagerow, color = AARs)) +
scale_color_brewer(palette = "Set2") +
theme_bw() +
theme(text = element_text(size = 14),
legend.text.align = 0,
legend.title.align=0.2,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text=element_text(size=10),
#panel.spacing.y = unit(0.8, "lines"),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position="bottom")
#Visualize the AARs
df %>%
mutate(AARs = factor(AARs, levels = c("PALS","Marginal zone","Red pulp", "B follicle"))) %>%
ggplot() + geom_point(aes(x = imagecol, y = imagerow, color = AARs)) +
scale_color_brewer(palette = "Set2") +
theme_bw() +
theme(text = element_text(size = 14),
legend.text.align = 0,
legend.title.align=0.2,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text=element_text(size=10),
#panel.spacing.y = unit(0.8, "lines"),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position="bottom")
#ggsave("/Users/lukar818/Documents/postdoc/research/RnaProt/plots/aarcolor.png", width = 9, height = 5, dpi=700)
ggsave(paste("/Users/lukar818/Documents/postdoc/research/RnaProt/plots/pdfplots/spleen", "/annotation.pdf", sep = ""), width = 7.4, height = 3.9, dpi=600)
#ggsave("/Users/lukar818/Documents/postdoc/research/RnaProt/plots/aarcolor.png", width = 9, height = 5, dpi=700)
ggsave(paste("/Users/lukar818/Documents/postdoc/research/RnaProt/plots/pdfplots/spleen", "/annotation.pdf", sep = ""), width = 8, height = 5, dpi=600)
#ggsave("/Users/lukar818/Documents/postdoc/research/RnaProt/plots/aarcolor.png", width = 9, height = 5, dpi=700)
ggsave(paste("/Users/lukar818/Documents/postdoc/research/RnaProt/plots/pdfplots/spleen", "/annotation.pdf", sep = ""), width = 9, height = 5, dpi=600)
#ggsave("/Users/lukar818/Documents/postdoc/research/RnaProt/plots/aarcolor.png", width = 9, height = 5, dpi=700)
ggsave(paste("/Users/lukar818/Documents/postdoc/research/RnaProt/plots/pdfplots/spleen", "/annotation.pdf", sep = ""), width = 9, height = 5.2, dpi=600)
